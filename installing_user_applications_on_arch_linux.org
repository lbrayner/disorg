* Installing user applications on Arch Linux

This guide assumes that you have followed *How to get Arch Linux up
and running for Junior Developers*.

** Firefox

~sudo pacman -S firefox~

When you install this package, you'll probably be prompted to choose
one provider of true type fonts, because, at this point, there won't
be any.

** VNC server and viewer

- =x11vnc=: a _VNC_ server implementation;
- =xorg-server-xvfb=: a virtual framebuffer X server.
- =xorg-xinit=: a program that allows a user to manually start an Xorg display server.

~sudo pacman -S x11vnc xorg-server-xvfb xorg-xinit~

Preferably we want to attach to an instance of =Xvfb= that will match
our monitor's specifications.

*** Creating a virtual frame buffer with Xvfb

The script that follows creates a virtual frame buffer with a
resolution of /1920x1000/ pixels. Note that it will first kill any
running instances that are using the same /X authority/ file, so that
there will effectively be only one running instance of =Xvfb=.

#+begin_src sh
#!/bin/sh

pkill -f '^/usr/bin/Xvfb.*:20\b'

authority=~/.Xauthority20

rm "${authority}"
touch "${authority}"
chmod 0600 "${authority}"

/usr/bin/xinit -- /usr/bin/Xvfb :20 -screen 0 1920x1000x24 -cc 4 \
    -nolisten tcp -auth "${authority}" >/dev/null 2>&1 &
#+end_src

=~/.Xauthority20= is going to be used as =authfile=, and 20, the
server number.

=xinit= is the utility that starts window managers or desktop
environments. Let's set up our =.xinitrc= file:

#+begin_src sh
# ~/.xinitrc

setxkbmap br # brazilian keyboard layout
startlxde # lxde is out desktop environment
#+end_src

You should also create a =~/.xsession= setting the keyboard layout
(not confirmed) for sessions started by the Display Manager:

#+begin_src sh
# ~/.xsession

setxkbmap br # brazilian keyboard layout
#+end_src

And finally a script that starts the /VNC/ server:

#+begin_src sh
#!/bin/sh

x11vnc -display :20 -localhost -auth ~/.Xauthority20
#+end_src

After creating the virtual frame buffer, start the /VNC/ server.

Our server is running on =localhost= and we'll connect to it using an
/SSH/ tunnel.

The client must have an implementation of the /VNC/ client installed,
such as =tigervnc=.

On the client, start an =ssh= connection with port 5900 forwarded to
*localhost*, port 5900, on the target machine:

~ssh -L 5900:127.0.0.1:5900 guilherme@host~

Finally, on the client, start the _VNC_ viewer:

~vncviwer 127.0.0.1~

*** Attaching to an existing X session

Supposing it's a session on a real monitor started by a regular user
(e.g. =guilherme=), you'll want to connect to display =:0= like this:

~x11vnc -display :0 -localhost -auth ~/.Xauthority~

** Samba (Client)

=cifs-utils= will allow you to mount samba shares: ~sudo pacman -S
cifs-utils~. Due to a dependency cycle, =smbclient=, which is capable
of listing public shares, might be also installed.

*** Mounting samba shares

Let's say there's a discoverable password protected share at
=\\192.168.100.100\Files=, to which =guilherme= has access.

To achieve automatic mounting, add this single line to your
=/etc/fstab=:

#+begin_src sh

# cifs

//192.168.100.100/Files /mnt/samba/Files cifs auto,uid=1000,gid=1000,file_mode=0664,dir_mode=0775,credentials=/root/.my_samba_credentials  0 0
#+end_src

What do the parameters mean?

- =uid= & =gid=: the user and group id of the mount (=guilherme='s
  =uid= and =gid= are both 1000);
- =file_mode= and =dir_mode=: exactly as it reads (it's the UNIX file
  mode for files and directories respectively);
- =credentials=: a file storing =guilherme='s samba username and password.

The format of the credentials file is:

#+begin_src conf
username=guilherme
password=password
#+end_src

For this to work you have to, of course, create the mount point first:

~sudo mkdir -p /mnt/samba/Files~

When you're done, mount your share:

~sudo mount -a~
