#+title: Installing user applications on Arch Linux

This guide assumes that you have followed *How to get Arch Linux up
and running for Junior Developers*.

* Firefox

~sudo pacman -S firefox~

When you install this package, you'll probably be prompted to choose
one provider of true type fonts, because, at this point, there won't
be any.

* VNC server and viewer

- =x11vnc=: a _VNC_ server implementation;
- =xorg-server-xvfb=: a virtual framebuffer X server.
- =xorg-xinit=: a program that allows a user to manually start an Xorg display server.

~sudo pacman -S x11vnc xorg-server-xvfb xorg-xinit~

Preferably we want to attach to an instance of =Xvfb= that will match
our monitor's specifications.

** COMMENT Creating a virtual frame buffer with Xvfb

The script that follows creates a virtual frame buffer with a
resolution of /1920x1000/ pixels. Note that it will first kill any
running instances that are using the same /X authority/ file, so that
there will effectively be only one running instance of =Xvfb=.

#+begin_src sh
#!/bin/sh

pkill -f '^/usr/bin/Xvfb.*:20\b'

sleep 1

authority=~/.Xauthority20

rm "${authority}"
touch "${authority}"
chmod 0600 "${authority}"

/usr/bin/xinit -- /usr/bin/Xvfb :20 -screen 0 1920x1000x24 -cc 4 \
    -nolisten tcp -auth "${authority}" >/dev/null 2>&1 &
#+end_src

=~/.Xauthority20= is going to be used as =authfile=, and 20, the
server number.

=xinit= is the utility that starts window managers or desktop
environments. Let's set up our =.xinitrc= file:

#+begin_src sh
# ~/.xinitrc

unset TMUX TMUX_PANE # unsetting TMUX variables
unset SSH_CLIENT SSH_CONNECTION SSH_TTY # unsetting SSH variables
setxkbmap br # brazilian keyboard layout
startlxde # lxde is out desktop environment
#+end_src

And finally a script that starts the /VNC/ server:

#+begin_src sh
#!/bin/sh

x11vnc -display :20 -localhost -auth ~/.Xauthority20
#+end_src

After creating the virtual frame buffer, start the /VNC/ server.

Our server is running on =localhost= and we'll connect to it using an
/SSH/ tunnel.

The client must have an implementation of the /VNC/ client installed,
such as =tigervnc=.

On the client, start an =ssh= connection with port 5900 forwarded to
*localhost*, port 5900, on the target machine:

~ssh -L 5900:127.0.0.1:5900 guilherme@host~

Finally, on the client, start the _VNC_ viewer:

~vncviwer 127.0.0.1~

** Creating a virtual frame buffer with Xvfb

The script that follows creates a virtual frame buffer with a
resolution of /1920x1000/ pixels. Note that it will first kill any
running instances that are using the same /X authority/ file, so that
there will effectively be only one running instance of =Xvfb=.

#+begin_src sh
#!/bin/sh

pkill -f '^/usr/bin/Xvfb.*:20\b'

sleep 1

authority=~/.Xauthority20

rm "${authority}"
touch "${authority}"
chmod 0600 "${authority}"

/usr/bin/xinit -- /usr/bin/Xvfb :20 -screen 0 1920x1000x24 -cc 4 \
    -nolisten tcp -auth "${authority}" >/dev/null 2>&1 &
#+end_src

=~/.Xauthority20= is going to be used as =authfile=, and 20, the
server number.

=xinit= is the utility that starts window managers or desktop
environments. Let's set up our =.xinitrc= file:

#+begin_src sh
# ~/.xinitrc

unset TMUX TMUX_PANE # unsetting TMUX variables
unset SSH_CLIENT SSH_CONNECTION SSH_TTY # unsetting SSH variables
setxkbmap br # brazilian keyboard layout
startxfce4
#+end_src

And finally a script that starts the /VNC/ server:

#+begin_src sh
#!/bin/sh

x11vnc -display :20 -localhost -auth ~/.Xauthority20
#+end_src

After creating the virtual frame buffer, start the /VNC/ server.

Our server is running on =localhost= and we'll connect to it using an
/SSH/ tunnel.

The client must have an implementation of the /VNC/ client installed,
such as =tigervnc=.

On the client, start an =ssh= connection with port 5900 forwarded to
*localhost*, port 5900, on the target machine:

~ssh -L 5900:127.0.0.1:5900 guilherme@host~

Finally, on the client, start the _VNC_ viewer:

~vncviwer 127.0.0.1~

** Attaching to an existing X session

Supposing it's a session on a real monitor started by a regular user
(e.g. =guilherme=), you'll want to connect to display =:0= like this:

~x11vnc -display :0 -localhost -auth ~/.Xauthority~

* Samba (Client)

=cifs-utils= will allow you to mount samba shares: ~sudo pacman -S
cifs-utils~. Due to a dependency cycle, =smbclient=, which is capable
of listing public shares, might be also installed.

** Mounting samba shares

Let's say there's a discoverable password protected share at
=\\192.168.100.100\Files=, to which =guilherme= has access.

To achieve automatic mounting, add this single line to your
=/etc/fstab=:

#+begin_src sh

# cifs

//192.168.100.100/Files /mnt/samba/Files cifs auto,uid=1000,gid=1000,file_mode=0664,dir_mode=0775,credentials=/root/.my_samba_credentials  0 0
#+end_src

What do the parameters mean?

- =uid= & =gid=: the user and group id of the mount (=guilherme='s
  =uid= and =gid= are both 1000);
- =file_mode= and =dir_mode=: exactly as it reads (it's the UNIX file
  mode for files and directories respectively);
- =credentials=: a file storing =guilherme='s samba username and password.

The format of the credentials file is:

#+begin_src conf
username=guilherme
password=password
#+end_src

For this to work you have to, of course, create the mount point first:

~sudo mkdir -p /mnt/samba/Files~

When you're done, mount your share:

~sudo mount -a~

* VSCodium

/VSCodium/ is in the *AUR* (Arch User Repository).

** COMMENT Yay

To install /AUR/ packages, it's recommended to use a helper. /Yay/
(Yet Another Yogurt - An /AUR/ Helper Written in Go) is currently the
most popular.

To download, build and install =yay-bin=, you'll need =git= (~sudo pacman
-S git~). Clone the official =yay-bin= /git/ repository:

#+begin_src sh
mkdir ~/git
cd ~/git
git clone https://aur.archlinux.org/yay-bin.git
cd yay-bin
#+end_src

What you've just downloaded is a =PKGBUILD= file.

#+begin_quote
A =PKGBUILD= is a shell script containing the build information required
by Arch Linux packages.

Packages in Arch Linux are built using the =makepkg= utility. When
=makepkg= is run, it searches for a =PKGBUILD= file in the current
directory and follows the instructions therein to either compile or
otherwise acquire the files to build a package archive
(=pkgname.pkg.tar.xz=). The resulting package contains binary files and
installation instructions, readily installable with =pacman=.
#+end_quote

Now build and install the package:

~makepkg -si~

No need to use =sudo=. It is used internally and privilege escalation
happens when necessary — you'll then be prompted for a password.

** Paru

To install /AUR/ packages, it's recommended to use a helper. /Paru/
(an /AUR/ helper and pacman wrapper written in Rust) is currently the
most popular.

To download, build and install =paru-bin=, you'll need =git= (~sudo pacman
-S git~). Clone the official =paru-bin= /git/ repository:

#+begin_src sh
mkdir ~/git
cd ~/git
git clone https://aur.archlinux.org/paru-bin.git
cd paru-bin
#+end_src

What you've just downloaded is a =PKGBUILD= file.

#+begin_quote
A =PKGBUILD= is a shell script containing the build information required
by Arch Linux packages.

Packages in Arch Linux are built using the =makepkg= utility. When
=makepkg= is run, it searches for a =PKGBUILD= file in the current
directory and follows the instructions therein to either compile or
otherwise acquire the files to build a package archive
(=pkgname.pkg.tar.xz=). The resulting package contains binary files and
installation instructions, readily installable with =pacman=.
#+end_quote

Now build and install the package:

~makepkg -si~

No need to use =sudo=. It is used internally and privilege escalation
happens when necessary — you'll then be prompted for a password.


** Installing VSCodium

With /Paru/ installed, you now have access to the /AUR/. Install
/VSCodium/:

~paru -S vscodium-bin~

It is not necessary — rather, it's not allowed — to use =sudo=.

When installing packages with /Paru/, you'll be asked whether you want
to see diffs.

* ungoogled-chromium

#+begin_quote
A lightweight approach to removing /Google/ web service dependency.
#+end_quote

This package is not available in the official repositories.

** Chaotic-AUR

From https://lonewolf.pedrohlc.com/chaotic-aur:

#+begin_quote
*Disclaimer:*

This repo is generated on-demand from packages I use on my personal
computer.
If you find any package license infringement, please notify me at
root[at]pedrohlc.com. I'll then remove it and blacklist.
#+end_quote

Install the [[https://aur.archlinux.org/packages/chaotic-keyring][keyring]] and the [[https://aur.archlinux.org/packages/chaotic-mirrorlist][mirrorlist]] from the /AUR/:

#+begin_src sh
paru -S chaotic-keyring chaotic-mirrorlist
#+end_src

Append to =/etc/pacman.conf=:

#+begin_src conf
[chaotic-aur]
Include = /etc/pacman.d/chaotic-mirrorlist
#+end_src

Then install =ungoogled-chromium= normally:

#+begin_src sh
sudo pacman -Sy ungoogled-chromium
#+end_src

* COMMENT Alacritty

~sudo pacman -S alacritty~

To copy and paste to and from the secondary clipboard, the key
bindings are =Ctrl + Shift + c= and =Ctrl + Shift + v=, respectively.

** Notes

This terminal uses a lot a RAM.

* COMMENT Geeqie Image Viewer

/Geeqie/ is a lightweight image viewer for Linux, BSDs and compatibles.

It can be used as a simple, fast, database-free image viewer, but
equally it can be used to manage large collections of images.

~sudo pacman -S geeqie~

* COMMENT Hacksaw + Shotgun

From /Shotgun/'s GitHub page:

#+begin_quote
A minimal screenshot utility for *X11*. /Shotgun/ was written to replace
/maim/ in my workflow.
#+end_quote

Hacksaw is a:

#+begin_quote
Lightweight selection tool for usage in screenshot scripts etc.
#+end_quote

Install both:

#+begin_src sh
sudo pacman -S hacksaw shotgun
#+end_src

This snippet will bind the /Print Screen/ key to a command that takes a
screenshot of the full screen and saves it to the =~/Pictures= folder:

#+begin_src xml
<!-- ~/.config/openbox/lxde-rc.xml -->
<!-- ... -->
<keyboard>
    <!-- ... -->
    <!-- other bindings -->
    <keybind key="Print">
        <action name="Execute">
            <command>sh -c "shotgun ~/Pictures/$(date '+%Y%m%d_%H%M%S').png"</command>
        </action>
    </keybind>
    <keybind key="W-Print">
        <action name="Execute">
            <command>sh -c "shotgun $(hacksaw -f '-i %i -g %g') ~/Pictures/$(date '+%Y%m%d_%H%M%S').png"</command>
        </action>
    </keybind>
    <!-- ... -->
</keyboard>
<!-- ... -->
#+end_src

It also binds the combination =Super + Print Screen= to another
command that uses /Hacksaw/ to take a screenshot of a portion of the
screen.

Find and delete any other bindings of the =Print Screen= key.

As always:

~openbox --reconfigure~

* Qalculate!

#+begin_quote
Calculator and equation solver with fault-tolerant parsing, constant
recognition and units.
#+end_quote

In short, it's a nice calculator with a nice GUI and advanced features.

~sudo pacman -S qalculate-gtk~

* Audio & Video

#+begin_src sh
sudo pacman -S celluloid
#+end_src

** Celluloid

/Celluloid/ is a GTK+ frontend for /mpv/.

** COMMENT Pragha Music Player

#+begin_quote
/Pragha/ is a Lightweight Music Player for GNU/Linux, based on /Gtk/,
/sqlite/, and completely written in C.
#+end_quote

* Dangling packages

Dependencies — that is, packages pulled in — are not in the scope of
=pacman='s =--remove= operation. This =pacman= query reveals dangling
packages:

#+begin_src sh
pacman -Qdtq
#+end_src
