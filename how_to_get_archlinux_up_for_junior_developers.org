* How to get Arch Linux up and running for Junior Developers

** Configure the Live Environment

*** Keyboard layout

#+begin_src sh
loadkeys br-abnt2 # brazilian keyboard layout
#+end_src

** Installation

*** Partitioning the disk

Check the current layout:

#+begin_src sh
fdisk -l
#+end_src

Suppose we have a 20G HDD and 16G of RAM.

Let's create a legacy DOS (=MBR=) partition table with ~fdisk~ that will
look like this:

#+begin_example
Device     Boot    Start      End  Sectors Size Id Type
/dev/sda1           2048 41943039 41940992  20G  5 Extended
/dev/sda5           4096  2101247  2097152   1G 83 Linux
/dev/sda6        2103296 10491903  8388608   4G 82 Linux swap / Solaris
/dev/sda7       10493952 41943039 31449088  15G 83 Linux
#+end_example

I recommend using the =KiB=, =MiB=, =GiB=, =TiB=, etc. notation for
exactness. This notation represents powers of 1024.

*On fdisk*

If there was an existing partition table, you might have to reboot, because the old partitions were already loaded by the kernel.

The following topics will assume the table above.

*** Formatting the partitions

#+begin_src sh
mkfs.ext4 /dev/sda5
mkfs.ext4 /dev/sda7

mkswap /dev/sda6
swapon /dev/sda6 # I suppose this will serve as a hint to gensfstab
#+end_src

*** Mounting the file systems

#+begin_src sh
mount /dev/sda7 /mnt
mkdir /mnt/boot
mount /dev/sda5 /mnt/boot
#+end_src

*** Installing essential packages

#+begin_src sh
pacstrap /mnt base base-devel linux linux-firmware vim tmux \
    networkmanager dhcpcd grub man-db man-pages
#+end_src

=vim= will be the text editor of choice.

** System configuration

*** fstab

Generate an =fstab= file using =UUIDs=:

~genfstab -U /mnt >> /mnt/etc/fstab~

Check the resulting =/mnt/etc/fstab= file and edit it in case of errors.

*** chroot

~arch-chroot /mnt~

*** Time zone

Replace =Region= and =City= accordingly.

~ln -sf /usr/share/zoneinfo/Region/City /etc/localtime~

*** Localization

Edit =/etc/locale.gen= and uncomment =en_US.UTF-8 UTF-8=. Generate the
locales by running:

~locale-gen~

Create the =locale.conf(5)= file, and set the =LANG= variable accordingly:

#+begin_src sh
# /etc/locale.conf

LANG=en_US.UTF-8
#+end_src

Make the keyboard layout changes persistent in =vconsole.conf(5):=

#+begin_src sh
# /etc/vconsole.conf

KEYMAP=br-abnt2
#+end_src

*** Network configuration

Create the hostname file:

#+begin_src sh
# /etc/hostname

arch
#+end_src

Add matching entries to =hosts(5):=

#+begin_src sh
# /etc/hosts

127.0.0.1	localhost
::1		localhost
127.0.1.1	arch.localdomain	arch
#+end_src

*** Root password

Set the root password:

~passwd~

*** GRUB

Assuming the processor is an =AMD64=:

~grub-install --target=i386-pc /dev/sda~

Generate the GRUB configuration file:

~grub-mkconfig -o /boot/grub/grub.cfg~

** Booting into the new system

*** Setting up the network connection

We'll assume there is a =DHCP= server in your network. (That's why the
package =dhcpcd= was installed.)

#+begin_src sh
systemctl enable dhcpcd
systemctl start dhcpcd # not sure this is necessary
systemctl restart systemd-networkd
#+end_src

Check you IP:

~ip route~

*** Installing an ssh server (optional)

=openssh= is our server of choice.

#+begin_src sh
pacman -S openssh
systemctl enable sshd
systemctl start sshd
#+end_src

Recent versions of =openssh= do not allow =root= login by default.

When accessing via =ssh=, =tmux= (or similar software) is
essential for multitasking. It requires, however, information about
the terminal it's drawing for. For example, if a user on =urxvt=
connects to the machine and tries to launch =tmux=, the package
=rxvt-unicode-terminfo= has to be present, else he will receive the
following error:

~open terminal failed: missing or unsuitable terminal: rxvt-unicode-256color~

Therefore:

~pacman -S rxvt-unicode-terminfo~

*** Creating a user other than root

Suppose the intended username is =guilherme=. =guilherme= is going to
be a =sudoer=.

#+begin_src sh
useradd -m guilherme # not sure if the -m flag is necessary
usermod -aG wheel
#+end_src

Added =guilherme= to the =wheel= group, which is the group we'll be
granting all permissions to in the =sudoers= file.

Finally, create a password:

~passwd guilherme~

*** sudo: the sudoers file

Run the command =visudo=:

~EDITOR=/usr/bin/vim visudo~

Allow everything for users that belong to the =wheel= group:

#+begin_src sh
# sudoers

...

## Uncomment to allow members of group wheel to execute any command
%wheel ALL=(ALL) ALL

...

#+end_src

Uncomment the line that contains ~%wheel ALL=(ALL) ALL~.

** Setting up a graphical environment

First, login as =guilherme=.

*** lxde, The Lightweight X11 Desktop Environment

In this guide we favor =lxde=. We'll also be installing =lightdm=, a
light display manager, in detriment of =lxdm=, that comes bundled with
the =lxde= package group.

#+begin_src sh
sudo pacman -S lxde lightdm lightdm-gtk-greeter
#+end_src

Let's enable the =lightdm= service:

~sudo systemctl enable lightdm~

And, finally, let's start it:

~sudo systemctl start lightdm~
