#+title: Configuring user applications on Arch Linux

This guide assumes that you have followed *How to get Arch Linux up
and running for Junior Developers*.

* bash

Configuring options, adding =~/bin= to =$PATH=, and creating an alias:

#+begin_src bash
#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'
PS1='[\u@\h \W]\$ '

# What follows are my additions

#
# Options
#

HISTCONTROL=ignoreboth

#
# Adding to $PATH
#

insertpath () {
    case ":$PATH:" in
        *:"$1":*)
            ;;
        *)
            PATH=${1}:${PATH}
    esac
}

# Adding ~/bin to $PATH
insertpath ~/bin

export PATH

#
# Variables
#

export EDITOR=/usr/bin/vim

#
# Aliases
#

alias lm='ls -lrth'
alias rsync='rsync --progress'
alias ta='tmux attach'
#+end_src

* tmux

To prevent =tmux= from launching a login shell (and stop the
indefinite growth of the =$PATH= environment variable) create
a =~/.tmux.conf= configuration file with this directive:

#+begin_src sh
set -g default-command "${SHELL}"
#+end_src

To get colors right inside /tmux/, set the =TERM= variable to =screen-256color=:

#+begin_src sh
set-option -g default-terminal "screen-256color"
#+end_src

This is the resulting file:

#+begin_src sh
# ~/.tmux.conf

set -g default-command "${SHELL}"
set-option -g default-terminal "screen-256color"
#+end_src

* Xorg

** Configuring X sessions

You may configure your *X* session with certain files —
which one to use depends on how you start *X*. If you start an *X*
session with the help of =lightdm=, the file =~/.xprofile= is going to
be sourced. Since other display managers may load =~/.xsession=, we'll
create a simple =~/.xprofile= that sources =~/.xsession=:

#+begin_src sh
# ~/.xprofile

. ~/.xsession
#+end_src

We can then place our configuration in =~/.xsession=:

#+begin_src sh
# ~/.xsession

#
# Adding to $PATH
#

insertpath () {
    case ":$PATH:" in
        *:"$1":*)
            ;;
        *)
            PATH=${1}:${PATH}
    esac
}

# Adding ~/bin to $PATH
insertpath ~/bin

export PATH

#
# Xorg options
#

setxkbmap br # brazilian keyboard layout

# vim:ft=sh
#+end_src

** DPMS: Display Power Management Signaling

Create a file in =/etc/X11/xorg.conf.d=:

#+begin_src conf
# /etc/X11/xorg.conf.d/10-monitor.conf

Section "ServerLayout"
    Identifier "ServerLayout0"
    Option "StandbyTime" "10"
    Option "SuspendTime" "20"
    Option "OffTime" "30"
EndSection
#+end_src

Now restart the *X* server: ~sudo systemctl restart lightdm~.

Verify the changes in =/var/log/Xorg.0.log=:

~grep StandbyTime /var/log/Xorg.0.log~

* lxde, The Lightweight X11 Desktop Environment

** Desktop notifications

Desktop notifications are small, passive popup dialogs that notify the
user of particular events in an asynchronous manner.

=libnotify= is an implementation of the
[[https://developer.gnome.org/notification-spec][Desktop Notifications Specification]] which provides support for /GTK/
and /Qt/ applications and is Desktop independent. It's probably
already installed on the system.

*** Dunst

/Dunst/ is a lightweight replacement for the =notification-daemons=
provided by most desktop environments. Install the =dunst= package:

~sudo pacman -S dunst~

Add /Dunst/ to /LXDE/'s autostart:

#+begin_src sh
# ~/.config/lxsession/LXDE/autostart

# These are the default LXDE startup applications

@lxpanel --profile LXDE
@pcmanfm --desktop --profile LXDE
@xscreensaver -no-splash

# dunst

@dunst
#+end_src

** Openbox: windows of certain applications maximized by default

Let's say you want all /Gvim/ (~sudo pacman -S gvim~) windows
maximized by default. First find out the window class with =xprop=,
which is part of the package =xorg-xprop=:

~xprop _OB_APP_CLASS~

With the mouse pointer having become cross-hairs, click on the desired
window.

Edit the /applications/ tag in =~/.config/openbox/lxde-rc.xml=:

#+begin_src xml
<!-- ~/.config/openbox/lxde-rc.xml -->
    <!-- ... -->
    <applications>
        <application class='Gvim'>
            <maximized>yes</maximized>
        </application>
    </applications>
    <!-- ... -->
#+end_src

Since managing windows is the window manager's job — /Openbox/, in our
case, run ~openbox --reconfigure~ to reload the configuration file.

Information obtained from https://askubuntu.com/q/275835.

** Openbox: Keyboard shortcuts

Keyboard shortcut mappings reside in
=~/.config/openbox/lxde-rc.xml=. Once you've edited them, make
/Openbox/ aware by running:

~openbox --reconfigure~

*** dmenu

Install =dmenu= with ~sudo pacman -S dmenu~. Create a shortcut to
=dmenu_run= by adding to the keyboard section:

#+begin_src xml
<!-- ~/.config/openbox/lxde-rc.xml -->
    <!-- ... -->
    <keyboard>
      <!-- ... -->
        <keybind key='A-C-d'>
            <action name='Execute'>
                <command>dmenu_run</command>
            </action>
        </keybind>
    </keyboard>
    <!-- ... -->
#+end_src

This binds =Ctrl + Alt + d= to =dmenu_run=. Don't forget to run
~openbox --reconfigure~.

Note that =Ctrl + Alt + d= is the default secondary binding of the
command =ToggleShowDesktop=, so it's recommended to delete that.

** Openbox: window snapping

Have your box do window snapping with theses additions to
=~/.config/openbox/lxde-rc.xml=:

#+begin_src xml
<!-- ~/.config/openbox/lxde-rc.xml -->
  <!-- ... -->
  <!-- Window snapping -->
  <keybind key="W-Left">
    <action name="UnmaximizeFull"/>
    <action name="MoveResizeTo">
      <x>0</x><y>0</y>
      <height>97%</height>
      <width>50%</width>
    </action>
  </keybind>
  <keybind key="W-Right">
    <action name="UnmaximizeFull"/>
    <action name="MoveResizeTo">
      <x>-0</x><y>0</y>
      <height>97%</height>
      <width>50%</width>
    </action>
  </keybind>
  <keybind key="W-Up">
    <action name="UnmaximizeFull"/>
    <action name="MoveResizeTo">
      <x>0</x><y>0</y>
      <width>100%</width>
      <height>50%</height>
    </action>
  </keybind>
  <keybind key="W-Down">
    <action name="UnmaximizeFull"/>
    <action name="MoveResizeTo">
      <x>0</x><y>-0</y>
      <width>100%</width>
      <height>50%</height>
    </action>
  </keybind>
  <!-- ... -->
#+end_src

** Desktop entries

To add a custom Desktop Entry, create a =.desktop= file in
=~/.local/share/applications=.

The following is an example of an entry for a generic /LXDE/ screen
locker. (You might simply copy the default one located in
=/usr/share/applications/lxde-screenlock.desktop= and remove the
=NoDisplay= entry.)

#+begin_src conf
# ~/.local/share/applications/lxlock.desktop

[Desktop Entry]
Type=Application
Name=Screen Locker
Comment=Lock your screen
Icon=system-lock-screen
Exec=lxlock
Categories=Settings;DesktopSettings
#+end_src

For your changes to be picked up, run:

~lxpanelctl restart~

*** i3lock

Install =i3lock= with ~sudo pacman -S i3lock~. Then create a
=.desktop= file:

#+begin_src conf
# ~/.local/share/applications/i3lock.desktop

[Desktop Entry]
Type=Application
Name=i3 Screen Locker
Comment=Lock your screen (i3lock)
Icon=system-lock-screen
Exec=i3lock.sh
Categories=Settings;DesktopSettings
#+end_src

The =i3lock.sh= script:

#+begin_src sh
#!/bin/sh

i3lock --color=000000
#+end_src

Put it in =~/bin=, which should be in your *PATH* if you've followed
the section [[*Configuring X sessions]]. If not, reference the script's
full path in the /Exec/ directive.

For your changes to be take effect, execute:

~lxpanelctl restart~

** PCManFm

If your desktop folders and launchers disappear, don't fret. /PCManFm/
is the software responsible for managing it — the process must have
simply been killed. Just restart it:

~pcmanfm --desktop --profile LXDE >/dev/null 2>&1 &~

The last three arguments are for: redirecting =stdout= to =/dev/null=,
=stderr= to =stdout=, and detaching the process.

*** Default terminal emulator

Set /PCManFm/'s default terminal emulator in /Edit/ → /Preferences/ →
/Advanced/ → /Terminal emulator/. /LXDE/'s default terminal emulator
is =lxterminal=, so type that in.

This will allow you to, for example, right-click on a folder and open
a terminal whose current directory is that node.

*** Archiver integration

=xarchiver= is a graphical front-end to various command-line
archivers. It integrates nicely and out-of-the-box with /PCManFm/.

~sudo pacman -S xarchiver~

*** udiskie

It's an utility that mounts removable disks automatically and
integrates well with /PCManFm/.

~sudo pacman -S udiskie~

From the =udiskie= [[https://github.com/coldfix/udiskie/wiki/Permissions][wiki]]:

#+begin_quote
=udiskie= requires permission for some =polkit= actions which are usually
granted when using a desktop environment. If your login session is not
properly activated you may need to customize your =polkit=
settings.
#+end_quote

Our system has =polkit= installed. Therefore create the file
=/etc/polkit-1/rules.d/50-udiskie.rules= with permissions 644, and
with the following contents:

#+begin_src javascript
// /etc/polkit-1/rules.d/50-udiskie.rules

polkit.addRule(function(action, subject) {
  var YES = polkit.Result.YES;
  // NOTE: there must be a comma at the end of each line except for the last:
  var permission = {
    // required for udisks1:
    "org.freedesktop.udisks.filesystem-mount": YES,
    "org.freedesktop.udisks.luks-unlock": YES,
    "org.freedesktop.udisks.drive-eject": YES,
    "org.freedesktop.udisks.drive-detach": YES,
    // required for udisks2:
    "org.freedesktop.udisks2.filesystem-mount": YES,
    "org.freedesktop.udisks2.encrypted-unlock": YES,
    "org.freedesktop.udisks2.eject-media": YES,
    "org.freedesktop.udisks2.power-off-drive": YES,
    // required for udisks2 if using udiskie from another seat (e.g. systemd):
    "org.freedesktop.udisks2.filesystem-mount-other-seat": YES,
    "org.freedesktop.udisks2.filesystem-unmount-others": YES,
    "org.freedesktop.udisks2.encrypted-unlock-other-seat": YES,
    "org.freedesktop.udisks2.eject-media-other-seat": YES,
    "org.freedesktop.udisks2.power-off-drive-other-seat": YES
  };
  if (subject.isInGroup("storage")) {
    return permission[action.id];
  }
});
#+end_src

This configuration allows all members of the =storage= group to run
/udiskie/:

~sudo usermod -aG storage guilherme~

Try starting udiskie from a terminal to check if there are any errors:

~udiskie~

Add /udiskie/ to /LXDE/'s autostart:

#+begin_src sh
# ~/.config/lxsession/LXDE/autostart

# These are the default LXDE startup applications

@lxpanel --profile LXDE
@pcmanfm --desktop --profile LXDE
@xscreensaver -no-splash

# udiskie

@udiskie
#+end_src

*** Trash

=gvfs= is recommended for trash support:

~sudo pacman -S gvfs~

Restart the /PCManFm/ desktop manager process:

#+begin_src sh
pkill pcmanfm
pcmanfm --desktop --profile LXDE >/dev/null 2>&1 &
#+end_src
